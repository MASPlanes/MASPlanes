# How the operator submits tasks to the planes.
#
#   random            Submit tasks to a random plane. This strategy can not be
#                       realized in the actual-world because the selected plane
#                       may not be in communication range of the operator.
#   nearest           Submit tasks to the plane that is currently nearest to
#                       them. This strategy can not be realized in the
#                       actual-world because the selected plane may not be in
#                       communication range of the operator.
#   nearest-inrange   Submit tasks to the plane that is nearest to it, and in
#                       communication range of the operator.
#   random-inrange    Submit tasks to the plane that is nearest to it, and in
#                       communication range of the operator.
#   omniscient        Submit tasks to planes best equipped to handle them, as
#                       an omniscient entity would see fit.
operator-strategy=nearest-inrange

# Coordination method used by the planes.
#
#   none        Each plane fullfills the tasks that it has received, without
#                 coordinating with others.
#   auction     Planes coordinate with each other using auctions.
#   maxsum      Planes coordinate using max-sum.
#   omniscient  Planes that coordinate through an omniscient entity.
#   tutorial    Use the planes implemented in the MASPlanes tutorial.
planes=none

# Type of the battery used by the planes.
#
#   default     Simple, recheargeable battery.
#   infinite    Infinite battery, always at full.
battery=infinite

# Mechanism used by the planes to evaluate the cost of performing tasks.
#
#   independent-distance    The cost of performing a task is the distance
#                             between the plane and the task. This strategy does
#                             not take into account any other tasks that the
#                             plane also has to complete.
#
#   independent-distance-battery
#                           The cost of performing a task is the distance
#                             between the plane and the task. If the plane does
#                             not have enough battery, the distance to the
#                             charging station is also taken into account. This
#                             strategy does not take into account any other
#                             tasks that the plane also has to complete.
task-evaluation=independent-distance-battery

# Strategy that defines the plane's behavior whenever it has no tasks to
# fulfill.
#
#   do-nothing              Just stay wherever the plane is, without doing anything.
#
#   fly-towards-operator    Approach the nearest operator until getting within
#                             its communication range.
#   fly-towards-operator-p  Approach the nearest operator until getting within
#                             its communication range, only with a probability
#                             p=0.01.
idle-strategy = fly-towards-operator

################################################################################
# OMNISCIENT SETTINGS
#
# Omniscient planes are coordinated by an omniscient god. This god may use
# different allocation strategies and/or have certain restrictions, to better
# capture the "upper bound" of how good the solutions achieved by coordinating
# planes can be.
################################################################################

# Allocation straetegy used by the omniscient god.
#   auction         Allocate using an independent-valuation auctions mechanism.
#   adhoc           Allocate using an adhoc mechanism (similar to stable marriage)
#   hungarian       Allocate using the optimal hungarian method for the independent
#                     task valuation assignment problem.
#   ssi             Allocate using Sequential Single-Item auctions.
#   incremental-ssi Allocate using Sequential Single-Item auctions.
#   maxsum          Allocate using Max-Sum. See the max-sum specific settings
#                     below, which also affect this coordination method.
omniscient-allocation = auction

################################################################################
# AUCTION SETTINGS
#
# Planes that coordinate by using auctions do it using single-unit, parallel
# auctions. Every <auction-every> tenths of s, all planes start an (independent)
# auction for each of the tasks they own. In the next step, all other planes
# in range bid for all the tasks of their neighbors. Finally, two tenths of s
# (steps) after the auctions began, the owner plane chooses a winner for each
# of its tasks (which may be itself). In case the winner is another plane, it
# transfers the ownership of that task to the new owner.
################################################################################

# Number of tenths of seconds between auctions.
# Warning: this setting is ignored by planes using omniscient max-sum
#          coordination. Instead, the omniscient entity starts a new max-sum
#          cycle every time something changes (a task is completed, a new task
#          is introduced, or some planes get in/out of range of each other).
auction-every = 10


################################################################################
# MAX-SUM SETTINGS
#
# Planes that coordinate by using max-sum do it in cycles. That is, the whole
# coordination procedure stats every <maxsum-start-every> iterations. Then, the
# planes execute <maxsum-iterations> of the max-sum algorithm. Finally, the
# tasks choose which plane will be responsible for them. In case a task has
# chosen a different owner than when the procedure started, the old owner
# transfers the task to the new one.
################################################################################

# Number of maxsum iterations to perform before making a decision.
maxsum-iterations = 9

# Number of iterations between maxsum cycles.
# Warning: this setting is ignored by planes using omniscient max-sum
#          coordination. Instead, the omniscient entity starts a new max-sum
#          cycle every time something changes (a task is completed, a new task
#          is introduced, or some planes get in/out of range of each other).
maxsum-start-every = 10

# Type of max-sum function used to represent plane's preferences.
#   independent  Each plane fullfills the tasks that it has received, without
#                  coordinating with others.
#   workload     Planes coordinate with each other using auctions.
maxsum-planes-function=workload

# Max-sum's workload parameters
maxsum-workload-function=k-alpha
maxsum-workload-k=1000
maxsum-workload-alpha=1.36
